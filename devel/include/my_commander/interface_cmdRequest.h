// Generated by gencpp from file my_commander/interface_cmdRequest.msg
// DO NOT EDIT!


#ifndef MY_COMMANDER_MESSAGE_INTERFACE_CMDREQUEST_H
#define MY_COMMANDER_MESSAGE_INTERFACE_CMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_commander
{
template <class ContainerAllocator>
struct interface_cmdRequest_
{
  typedef interface_cmdRequest_<ContainerAllocator> Type;

  interface_cmdRequest_()
    : start(false)
    , amp_cmd(0.0)
    , feq_cmd(0.0)  {
    }
  interface_cmdRequest_(const ContainerAllocator& _alloc)
    : start(false)
    , amp_cmd(0.0)
    , feq_cmd(0.0)  {
    }



   typedef uint8_t _start_type;
  _start_type start;

   typedef double _amp_cmd_type;
  _amp_cmd_type amp_cmd;

   typedef double _feq_cmd_type;
  _feq_cmd_type feq_cmd;




  typedef boost::shared_ptr< ::my_commander::interface_cmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_commander::interface_cmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct interface_cmdRequest_

typedef ::my_commander::interface_cmdRequest_<std::allocator<void> > interface_cmdRequest;

typedef boost::shared_ptr< ::my_commander::interface_cmdRequest > interface_cmdRequestPtr;
typedef boost::shared_ptr< ::my_commander::interface_cmdRequest const> interface_cmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_commander::interface_cmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_commander::interface_cmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_commander

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'my_commander': ['/home/tianshipei/ros_ws/devel/share/my_commander/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_commander::interface_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_commander::interface_cmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_commander::interface_cmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f764da1f64f6ccc6d3a782470212a14";
  }

  static const char* value(const ::my_commander::interface_cmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f764da1f64f6cccULL;
  static const uint64_t static_value2 = 0x6d3a782470212a14ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_commander/interface_cmdRequest";
  }

  static const char* value(const ::my_commander::interface_cmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool start\n\
float64 amp_cmd\n\
float64 feq_cmd\n\
";
  }

  static const char* value(const ::my_commander::interface_cmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.amp_cmd);
      stream.next(m.feq_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct interface_cmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_commander::interface_cmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_commander::interface_cmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "amp_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.amp_cmd);
    s << indent << "feq_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.feq_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_COMMANDER_MESSAGE_INTERFACE_CMDREQUEST_H
