// Generated by gencpp from file cartesian_moves/cartTrajGoal.msg
// DO NOT EDIT!


#ifndef CARTESIAN_MOVES_MESSAGE_CARTTRAJGOAL_H
#define CARTESIAN_MOVES_MESSAGE_CARTTRAJGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cartesian_moves
{
template <class ContainerAllocator>
struct cartTrajGoal_
{
  typedef cartTrajGoal_<ContainerAllocator> Type;

  cartTrajGoal_()
    : traj_id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , speed(0.0)  {
    }
  cartTrajGoal_(const ContainerAllocator& _alloc)
    : traj_id(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , speed(0.0)  {
    }



   typedef int32_t _traj_id_type;
  _traj_id_type traj_id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _speed_type;
  _speed_type speed;




  typedef boost::shared_ptr< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> const> ConstPtr;

}; // struct cartTrajGoal_

typedef ::cartesian_moves::cartTrajGoal_<std::allocator<void> > cartTrajGoal;

typedef boost::shared_ptr< ::cartesian_moves::cartTrajGoal > cartTrajGoalPtr;
typedef boost::shared_ptr< ::cartesian_moves::cartTrajGoal const> cartTrajGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartesian_moves::cartTrajGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cartesian_moves

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'cartesian_moves': ['/home/tianshipei/ros_ws/devel/share/cartesian_moves/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c9d171de0a5d566db69145fc6a3bbb1";
  }

  static const char* value(const ::cartesian_moves::cartTrajGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c9d171de0a5d566ULL;
  static const uint64_t static_value2 = 0xdb69145fc6a3bbb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartesian_moves/cartTrajGoal";
  }

  static const char* value(const ::cartesian_moves::cartTrajGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
#the lines with the hash signs are merely comments\n\
#goal, result and feedback are defined by this fixed order, and separated by 3 hyphens\n\
#trajectory_msgs/JointTrajectory trajectory\n\
int32 traj_id\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 speed\n\
";
  }

  static const char* value(const ::cartesian_moves::cartTrajGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct cartTrajGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartesian_moves::cartTrajGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartesian_moves::cartTrajGoal_<ContainerAllocator>& v)
  {
    s << indent << "traj_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTESIAN_MOVES_MESSAGE_CARTTRAJGOAL_H
