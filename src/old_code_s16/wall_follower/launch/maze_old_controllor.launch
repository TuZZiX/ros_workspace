<?xml version="1.0" encoding="utf-8"?>
<launch>
	<param name="/UPDATE_RATE" value="50.0"/>
	<param name="/K_PHI" value="10.0"/>
	<param name="/K_DISP" value="3.0"/>
	<param name="/K_TRIP_DIST" value="1.0"/>
	<param name="/MAX_SPEED" value="0.5"/>
	<param name="/MAX_OMEGA" value="0.5"/>

	<param name="/K_PSI" value="5.0"/>
	<param name="/K_LAT_ERR_THRESH" value="3.0"/>

	<param name="/MIN_SAFE_DISTANCE" value="1.0"/>
	<param name="/DETECT_DISTANCE" value="2.5"/>
	<param name="/FRONT_ANGLE" value="0.5"/>
	<param name="/LEFT_ANGLE" value="0.5"/>
	<param name="/RIGHT_ANGLE" value="0.5"/>

	<param name="/accel_max" value="0.5"/>
	<param name="/alpha_max" value="0.2"/>
	<param name="/speed_max" value="0.5"/>
	<param name="/omega_max" value="0.5"/>

	<env name="GAZEBO_MODEL_PATH" value="$(find wall_follower)/models" />
	<arg name="world_name" value="$(find wall_follower)/worlds/challenge_maze.world" />
	<arg name="paused" value="false"/>
	<arg name="debug" value="false"/>  
	<arg name="gui" value="true"/> 

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_name)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />    
		<arg name="use_sim_time" value="true" />
		<arg name="headless" value="false" />
	</include>

	<param name="robot_description" command="$(find xacro)/xacro.py '$(find mobot_urdf)/urdf/mobot_w_lidar_and_kinect.xacro'" />

	<!-- Spawn the robot from parameter server into Gazebo -->
	<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model mobot" />

	<node pkg="tf" type="static_transform_publisher" name="kinect_broadcaster" args="0 0 0 -0.500 0.500 -0.500 0.500 kinect_link kinect_depth_frame 100" />

	<!-- start a robot_state_publisher -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

	<!-- launch rviz using a specific config file -->
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find wall_follower)/launch/amcl.rviz"/>

	<!-- launch image_view as well --> 
	<node pkg="image_view" type="image_view" name="image_view">
		<remap from="image" to="/kinect/rgb/image_raw" />
	</node>

	<remap from="/robot0/laser_0" to="/scan"/>
	<remap from="/robot0/cmd_vel" to="/cmd_vel"/>
	<remap from="/robot0/odom" to="/odom"/>

	<node name= "feedback_solver" pkg= "maze_solver" type= "feedback_solver" output="screen" /> 

	<!--<node name= "slam_gmapping" pkg= "gmapping" type= "slam_gmapping" output="screen" />-->
	<node name= "wall_detector" pkg= "wall_follower" type= "wall_detector" output="screen" />

	<!--<node name= "simple_controllor" pkg= "wall_follower" type= "simple_controllor" output="screen" />-->
	<!--<node name= "steering_corrector" pkg= "wall_follower" type= "steering_corrector" output="screen"/> -->
	<!--<node name= "steering_corrector_nl" pkg= "wall_follower" type= "steering_corrector_nl" output="screen"/>-->
	<!--<node name= "map_server" pkg= "map_server" type= "map_server" args="$(find wall_follower)/map/better_pen.yaml" output="screen"/>-->

	<!--<node name= "amcl_odom_tf" pkg= "wall_follower" type= "amcl_odom_tf" output="screen"/>-->
	<!--<node pkg="amcl" type="amcl" name="amcl" output="screen"/>-->
	
</launch>